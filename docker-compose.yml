services:
  app:
    container_name: limitr_app
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - ${PORT}:${PORT}
    environment:
      PORT: ${PORT}
      DB_PORT: ${DB_PORT}
      DB_HOST: postgres
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SCHEMA: ${DB_SCHEMA}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - limitr
  postgres:
    container_name: limitr_pg
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}'"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - limitr
  redis:
    container_name: limitr_redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test:
        ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - limitr
  migrate:
    container_name: limitr_migrate
    build: .
    depends_on:
      - postgres
    environment:
      GOOSE_MIGRATION_DIR: "./sql/migrations"
      GOOSE_DBSTRING: "postgres://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE}?sslmode=disable"
      GOOSE_DRIVER: "postgres"
    command: >
      goose up
    networks:
      - limitr


volumes:
  pgdata:
  redisdata:
networks:
  limitr:
