// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createKey = `-- name: CreateKey :one
INSERT INTO api_keys (
    hashed_key, limit_per_minute
) VALUES (
    $1, $2
)
RETURNING id, hashed_key, limit_per_minute, created_at
`

type CreateKeyParams struct {
	HashedKey      string
	LimitPerMinute int32
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createKey, arg.HashedKey, arg.LimitPerMinute)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.HashedKey,
		&i.LimitPerMinute,
		&i.CreatedAt,
	)
	return i, err
}

const deleteKey = `-- name: DeleteKey :exec
DELETE FROM api_keys
WHERE id = $1
`

func (q *Queries) DeleteKey(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteKey, id)
	return err
}

const listKeys = `-- name: ListKeys :many
SELECT id, hashed_key, limit_per_minute, created_at FROM api_keys
ORDER BY created_at DESC
`

func (q *Queries) ListKeys(ctx context.Context) ([]ApiKey, error) {
	rows, err := q.db.Query(ctx, listKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiKey
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.HashedKey,
			&i.LimitPerMinute,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
